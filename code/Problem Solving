
# https://leetcode.com/problems/build-array-from-permutation/

class Solution {
    public int[] buildArray(int[] nums) {
        int[] ans = new int[nums.length];
        for(int i=0; i<nums.length; i++){
            if(ans[i] == nums[nums[i]]){
                swap(nums, i , nums[i]);
            }
        } return nums;
    }
    
    static void swap(int nums, int f, int s){
        int temp = nums[f];
        nums[f] = nums[s];
        nums[s] = temp;
    }
}



https://leetcode.com/problems/concatenation-of-array/submissions/

class Solution {
    public int[] sortArrayByParityII(int[] A) {
        int i = 0, j = 1, n = A.length;
        while (i < n && j < n) {
            while (i < n && A[i] % 2 == 0) {
                i += 2;
            }
            while (j < n && A[j] % 2 == 1) {
                j += 2;
            }
            if (i < n && j < n) {
                swap(A, i, j);
            }
        }
        return A;
    }
    static void swap(int[] A, int i, int j) {
        int temp = A[i];
        A[i] = A[j];
        A[j] = temp;
    }
}



https://leetcode.com/problems/concatenation-of-array/submissions/

class Solution {
    public int[] buildArray(int[] nums) {
        int[] ans = new int[nums.length];
        for(int i=0; i<nums.length; i++){
            ans[i] = nums[nums[i]];
        } return ans;
    }
    
}

Check this out !! (Last problem has some error)

https://leetcode.com/problems/running-sum-of-1d-array/

class Solution {
    public int[] runningSum(int[] nums) {
        int n=nums.length;
        int [] ans= new int[n];
        ans[0] = nums[0];
        for(int i=0 ;i< n-1; i++){
            for(int j=i+1; j< n; j++){
                ans[i+1] = ans[i]+nums[j];
            }
        }
        return ans;  
    }
}

